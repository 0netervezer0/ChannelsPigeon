import logging
import asyncio
from io import BytesIO
from typing import Dict, List
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from qrcode import QRCode

# Configuration
configFile = open( 'config.txt' )
cnf = configFile.read().split( '@' )
BOT_TOKEN   = cnf[0]
API_ID      = cnf[1]       
API_HASH    = cnf[2]

# Key variables
monitored_channels: Dict[str, List[int]] = {  }  # { "channel_username": [user_id1, user_id2] }
user_sessions: Dict[int, str] = {  }  # { user_id: "telethon_session_string" }
active_qr_logins = {  }  # { user_id: (client, qr_login) }

# Logging configuration
logging.basicConfig(  
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level = logging.INFO
 )
logger = logging.getLogger(  __name__  )

# ===== Telegram Bot Handlers =====
async def start(  update: Update, context: ContextTypes.DEFAULT_TYPE  ) -> None:
    keyboard = [
        [KeyboardButton( "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" ), KeyboardButton( "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" )],
        [KeyboardButton( "üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã" ), KeyboardButton( "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" )]
    ]
    reply_markup = ReplyKeyboardMarkup( keyboard, resize_keyboard = True )

    await update.message.reply_text( 
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "1. –ù–∞–∂–º–∏ 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ QR-–∫–æ–¥\n"
        "2. –î–æ–±–∞–≤—å –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'\n"
        "3. –ü–æ–ª—É—á–∞–π –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
        reply_markup = reply_markup
     )

async def button_handler(  update: Update, context: ContextTypes.DEFAULT_TYPE  ) -> None:
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        await generate_qr_login( update, user_id )
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª":
        await handle_add_channel( update, user_id )
    elif text == "üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã":
        await my_channels( update, context )
    elif text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
        await handle_unsubscribe( update, user_id )

async def generate_qr_login(  update: Update, user_id: int  ):
    if user_id in active_qr_logins:
        await update.message.reply_text( "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π QR-–∫–æ–¥" )
        return
    
    client = TelegramClient( StringSession(  ), API_ID, API_HASH )
    await client.connect(  )
    qr_login = await client.qr_login(  )
    
    # Generate QR code
    qr = QRCode(  )
    qr.add_data( qr_login.url )
    img = qr.make_image( fill_color = "black", back_color = "white" )
    
    # Send QR code to user
    img_io = BytesIO(  )
    img.save( img_io, 'PNG' )
    img_io.seek( 0 )
    
    await update.message.reply_photo(
        photo = img_io,
        caption = "üîë –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –≤ Telegram:\n"
                  "1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n"
                  "2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
                  "3. –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥\n\n"
                  "‚è≥ QR-–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 –º–∏–Ω—É—Ç—É"
    )
    
    active_qr_logins[user_id] = ( client, qr_login )
    asyncio.create_task( wait_for_login( update, user_id, client, qr_login ) )

async def wait_for_login(  update: Update, user_id: int, client: TelegramClient, qr_login ):
    try:
        await qr_login.wait(  timeout = 60 )
        
        if await qr_login.is_signed_in(  ):
            session_string = client.session.save(  )
            user_sessions[user_id] = session_string
            await update.message.reply_text( "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!" )
            asyncio.create_task( start_telethon_client( user_id, session_string ) )
        else:
            await update.message.reply_text( "‚ùå –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." )
    except Exception as e:
        logger.error( f"–û—à–∏–±–∫–∞ QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: { e }" )
        await update.message.reply_text( "‚åõ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è QR-–∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ" )
    finally:
        if user_id in active_qr_logins:
            del active_qr_logins[user_id]
        await client.disconnect(  )

async def handle_add_channel(  update: Update, user_id: int  ):
    if user_id not in user_sessions:
        await update.message.reply_text( "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'" )
        return
    await update.message.reply_text( "üìù –í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:" )

async def handle_unsubscribe(  update: Update, user_id: int  ):
    if user_id not in user_sessions:
        await update.message.reply_text( "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'" )
        return
    await update.message.reply_text( "üìù –í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:" )

async def handle_message(  update: Update, context: ContextTypes.DEFAULT_TYPE  ):
    text = update.message.text
    user_id = update.effective_user.id
    
    if text.startswith( "@" ):
        context.args = [text[1:]]  # Remove @ symbol
        if user_id in user_sessions:
            if "–¥–æ–±–∞–≤" in update.message.reply_to_message.text.lower(  ):
                await add_channel( update, context )
            elif "–æ—Ç–ø–∏—Å" in update.message.reply_to_message.text.lower(  ):
                await unsubscribe( update, context )
        else:
            await update.message.reply_text( "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'" )

async def add_channel( update: Update, context: ContextTypes.DEFAULT_TYPE ) -> None:
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text( "–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, channel_name)" )
        return
    
    channel_username = context.args[0]
    if channel_username not in monitored_channels:
        monitored_channels[channel_username] = []
    
    if user_id not in monitored_channels[channel_username]:
        monitored_channels[channel_username].append( user_id )
        await update.message.reply_text( f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ @{ channel_username }!" )
    else:
        await update.message.reply_text( "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª" )

async def my_channels( update: Update, context: ContextTypes.DEFAULT_TYPE ) -> None:
    user_id = update.effective_user.id
    user_channels = [
        f"@{ channel }" for channel, users in monitored_channels.items(  )
        if user_id in users
    ]
    
    if not user_channels:
        await update.message.reply_text( "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫" )
    else:
        await update.message.reply_text( 
            "üì¢ –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join( user_channels )
         )

async def unsubscribe( update: Update, context: ContextTypes.DEFAULT_TYPE ) -> None:
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text( "–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:" )
        return
    
    channel_username = context.args[0]
    if channel_username in monitored_channels and user_id in monitored_channels[channel_username]:
        monitored_channels[channel_username].remove( user_id )
        await update.message.reply_text( f"‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç @{ channel_username }" )
    else:
        await update.message.reply_text( "‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª" )

# ===== Telethon Monitor =====
async def start_telethon_client( user_id: int, session_string: str ):
    application = Application.builder().token( BOT_TOKEN ).build()
    bot = application.bot
    
    async with TelegramClient( 
        StringSession( session_string ), API_ID, API_HASH
     ) as client:
        @client.on( events.NewMessage )
        async def handler( event ):
            try:
                chat = await event.get_chat(  )
                if not chat.username:
                    return
                
                channel_username = chat.username
                if channel_username in monitored_channels:
                    for user in monitored_channels[channel_username]:
                        if user == user_id:
                            await bot.send_message( 
                                chat_id = user,
                                text = f"üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ @{ channel_username }:\n\n{ event.text }"
                             )
            except Exception as e:
                logger.error( f"–û—à–∏–±–∫–∞: { e }" )
        
        await client.run_until_disconnected()

# ===== Launch =====
def main():
    application = Application.builder().token( BOT_TOKEN ).build()
    
    # Handlers
    application.add_handler( CommandHandler( "start", start ) )
    application.add_handler( MessageHandler( filters.TEXT & ~filters.COMMAND, button_handler ) )
    application.add_handler( MessageHandler( filters.TEXT & ~filters.COMMAND, handle_message ) )
    
    application.run_polling()

if __name__ == '__main__':
    main()